class(countries_region)
## Great Learning - Theo Dufort
## Video - R Overview & Preliminary Steps
## Download R language from https://cran.r-project.org/bin/macosx/
## Download R-studio from https://posit.co/download/rstudio-desktop/
## ctrl + ↵ executes the line of code where the cursor is.
## 2 ways of assignments
a = 1
b <- 2
print (a)
print (b)
print(a+b)
print("hello world")
## Computations
17+5
a+10
a = sqrt(16)
a  ## displays the value of the variable 'a'
## Video - Data Types
## strings (character)
## single or double quotes could be used to define a string
a = 'Hello'
a
b = "Hello"
b
## to know data type of an object:
print(class(a))
class(3.5)   ## numeric
class("qwerty")   ## character
## boolean
a = TRUE
b = FALSE
print(a)
print(class(b))  ## logical
## Video - Data Structures
## Vectors
a = c(1,2,3,4)
a
class(a)
b = c("hello", "hi", "good day")
b
class(b)
c = c(1,2,"HI")  ## first 2 elements get coerced to class 'CHARACTER'
c
class(c)
## accessing elements of vector
## indices do not start with 0 as in python, rather they start with 1.
c[3]
## Matrices
## vectors are 1-D, matrices are 2-D
my_vector = c(10,20,30,40)
class(my_vector)    ## numeric
my_matrix = matrix(my_vector,nrow=2,ncol=2)
my_matrix
class(my_matrix)   ## "matrix" "array"
1:9
a = 1:9
a
my_matrix2 = matrix(1:9,nrow=3,ncol=3)
my_matrix2
## accessing elements of matrix
my_matrix2[1,3]   ## first no. is row, 2nd one is column
my_matrix2[2,]    ## accessing entire row
my_matrix2[,3]    ## accessing entire column
my_matrix2[2:3,1:2]   ## accessing a subset of matrix by giving ranges of
## rows and columns.
my_matrix2[-2,-1]   ## accessing a subset of matrix by giving row index and
## columns index to be excluded
## Vectors and matrices can store only one type of data.
## Dataframes are similar to matrices, but in dataframes, different
## columns can have different data types.
vector1 = c(10,20,30,40)
vector2 = c("John","Sandy","Kate","Jon")
df = data.frame(vector1,vector2)
df
## my trial - gives absurd column names ('X1.3' and 'c..a....b....c..'):
df1 = data.frame(1:3,c('a','b','c'))
df1
class(df)  ## "data.frame"
df$vector1   ## accessing a column
class(df$vector1)  ## "numeric"
class(df$vector2)  ## "character"
## also dataframe elements can be accessed exactly like those of matrices
df[,2]   ## access all rows of 2nd column
df[1:3,]   ## access rows 1 to 3 of all columns
subset_df = df[1:3,]
subset_df
### Lists
## lists can store different data type objects unlike vectos
my_list = list(1,"Hello",a,b,df)
my_list
my_list[[3]]   ## accessing a single element
my_list[1:3]   ## accessing multiple elements
my_list[3]    ## returns 3rd element in an array
## For lists, one generally uses [[ to select any single element,
## whereas [ returns a list of the selected elements.
my_list[5][1,]     ## would return error
## Great Learning - Theo Dufort
## Video - R Overview & Preliminary Steps
## Download R language from https://cran.r-project.org/bin/macosx/
## Download R-studio from https://posit.co/download/rstudio-desktop/
## ctrl + ↵ executes the line of code where the cursor is.
## 2 ways of assignments
a = 1
b <- 2
print (a)
print (b)
print(a+b)
print("hello world")
## Computations
17+5
a+10
a = sqrt(16)
a  ## displays the value of the variable 'a'
## Video - Data Types
## strings (character)
## single or double quotes could be used to define a string
a = 'Hello'
a
b = "Hello"
b
## to know data type of an object:
print(class(a))
class(3.5)   ## numeric
class("qwerty")   ## character
## boolean
a = TRUE
b = FALSE
print(a)
print(class(b))  ## logical
## Video - Data Structures
## Vectors
a = c(1,2,3,4)
a
class(a)
b = c("hello", "hi", "good day")
b
class(b)
c = c(1,2,"HI")  ## first 2 elements get coerced to class 'CHARACTER'
c
class(c)
## accessing elements of vector
## indices do not start with 0 as in python, rather they start with 1.
c[3]
## Matrices
## vectors are 1-D, matrices are 2-D
my_vector = c(10,20,30,40)
class(my_vector)    ## numeric
my_matrix = matrix(my_vector,nrow=2,ncol=2)
my_matrix
class(my_matrix)   ## "matrix" "array"
1:9
a = 1:9
a
my_matrix2 = matrix(1:9,nrow=3,ncol=3)
my_matrix2
## accessing elements of matrix
my_matrix2[1,3]   ## first no. is row, 2nd one is column
my_matrix2[2,]    ## accessing entire row
my_matrix2[,3]    ## accessing entire column
my_matrix2[2:3,1:2]   ## accessing a subset of matrix by giving ranges of
## rows and columns.
my_matrix2[-2,-1]   ## accessing a subset of matrix by giving row index and
## columns index to be excluded
## Vectors and matrices can store only one type of data.
## Dataframes are similar to matrices, but in dataframes, different
## columns can have different data types.
vector1 = c(10,20,30,40)
vector2 = c("John","Sandy","Kate","Jon")
df = data.frame(vector1,vector2)
df
## my trial - gives absurd column names ('X1.3' and 'c..a....b....c..'):
df1 = data.frame(1:3,c('a','b','c'))
df1
class(df)  ## "data.frame"
df$vector1   ## accessing a column
class(df$vector1)  ## "numeric"
class(df$vector2)  ## "character"
## also dataframe elements can be accessed exactly like those of matrices
df[,2]   ## access all rows of 2nd column
df[1:3,]   ## access rows 1 to 3 of all columns
subset_df = df[1:3,]
subset_df
### Lists
## lists can store different data type objects unlike vectos
my_list = list(1,"Hello",a,b,df)
my_list
my_list[[3]]   ## accessing a single element
my_list[1:3]   ## accessing multiple elements
my_list[3]    ## returns 3rd element in an array
## For lists, one generally uses [[ to select any single element,
## whereas [ returns a list of the selected elements.
## my_list[5][1,]     ## would return error
my_list[[5]][1,]     ## would access the first row of the dataframe(5th element)
my_list[5][[1]][1,]     ## same as above
my_list[5][1][1][1][1][[1]][1,]     ## same as above
## Video - Importing Data
## packages not on local can be downloaded from the CRAN repository via
## a CRAN mirror nearest to one's loaction.
install.packages("readr")    ## install readr package, one can also install
## from the bottom-right pane's "Package" >> "Install".
library(readr)    ## load library for current session. A tick mark appears on
## the checkbox of the library under bottom-right pane's "Package".
## to change CRAN mirror on R-studio on Windows system:
## "Tools" >> "Global Options" >> "Packages" >"Package Environment">"CRAN Mirror">"Change"
getwd()   ## get current working directory
## set working directory:
setwd(
"C:/Users/cools/Desktop/R/Datasets")
getwd()   ## get current working directory
## set working directory:
setwd(
"/Users/jitendrakumarnayak/Desktop/R/Datasets")
## import .txt with space separated values from working directory
titanic = read.table('Titanic_space_separated-1.txt',header=TRUE)
titanic
class(titanic)   ## "data.frame"
View(titanic)    ## opens imported data in a new tab.   ## same as opening from
head(titanic,5)    ## view first 5 rows of the imported dataset.
tail(titanic,10)    ## view last 10 rows of imported dataset.
str(titanic)    ## gives info of imported data
## factor datatypes are categorical data. They can store both numbers and strings.
titanic$Sex = as.factor(titanic$Sex)  ## change data-type of column "Sex" from
## "chr" to "Factor".
str(titanic)
titanic$Sex = as.character(titanic$Sex)  ## change back data-type of column
summary(titanic)     ## see summary of imported data.
## my trial - converting all columns to "Factor" and checking summary:
titanic$Class = as.factor(titanic$Class)
titanic$Sex = as.factor(titanic$Sex)
titanic$Age = as.factor(titanic$Age)
titanic$Survived = as.factor(titanic$Survived)
summary(titanic)
## import .txt with comma separated values
orange = read.table('Orange_comma_separated.txt',header=TRUE,sep=',')
orange
View(orange)
str(orange)
summary(orange)
orange$Tree = as.factor(orange$Tree)
summary(orange)
detach("package:readr", unload = TRUE)    ## detach "readr" library from
library(readr)
countries = read_csv("Countries Population.csv")
head(countries)
summary(countries)
countries = countries[,c(1:3)]    ## removing last 2 empty columns
countries
summary(countries)
## changing datatypes
countries$`Country Name` = as.factor(countries$`Country Name`)
countries$`Country Code` = as.factor(countries$`Country Code`)
summary(countries)
install.packages("readxl")
library(readxl)
countries_region <- read_excel("Countries Region Mapping.xlsx")
countries_region
class(countries_region)
countries_region = as.data.frame(countries_region)    ## changing to dataframe type
class(countries_region)
getwd()
# Working Directory
setwd("/Users/jitendrakumarnayak/Desktop/R/Datasets")
getwd()
